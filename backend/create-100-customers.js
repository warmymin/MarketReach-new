const axios = require('axios');

const API_BASE_URL = 'http://localhost:8083/api';

// 한국 이름 데이터 (기존 + 추가)
const KOREAN_NAMES = [
    "김철수", "이영희", "박민수", "정수진", "최동욱", "한미영", "송태호", "윤지영", "강현우", "임서연",
    "조성민", "백지원", "오승호", "신혜진", "유재석", "전지현", "남궁민", "서예진", "권지용", "배수지",
    "홍길동", "김영수", "이미라", "박준호", "정다은", "최민호", "한소희", "송중기", "윤아", "강동원",
    "임시현", "조인성", "백종원", "오정연", "신동엽", "전도연", "남상미", "서강준", "권상우", "배두나",
    "홍석천", "김태희", "이병헌", "박보영", "정우성", "최지우", "한가인", "송혜교", "윤계상", "강소라",
    // 추가 이름들
    "김민준", "이서연", "박지훈", "정수빈", "최준호", "한지민", "송민재", "윤서영", "강현준", "임다은",
    "조우진", "백서현", "오민석", "신지원", "유서진", "전현우", "남지은", "서준영", "권서연", "배민재",
    "홍지현", "김현우", "이준호", "박서영", "정민재", "최지은", "한현준", "송서연", "윤민재", "강지현",
    "임현우", "조준호", "백서영", "오민재", "신지은", "유현준", "전서연", "남민재", "서지현", "권현우",
    "배준호", "홍서영", "김민재", "이지은", "박현준", "정서연", "최민재", "한지현", "송현우", "윤준호",
    "강서영", "임민재", "조지은", "백현준", "오서연", "신민재", "유지현", "전현우", "남준호", "서서영",
    "권민재", "배지은", "홍현준", "김서연", "이민재", "박지현", "정현우", "최준호", "한서영", "송민재",
    "윤지은", "강현준", "임서연", "조민재", "백지현", "오현우", "신준호", "유서영", "전민재", "남지은",
    "서현준", "권서연", "배민재", "홍지현", "김현우", "이준호", "박서영", "정민재", "최지은", "한현준"
];

// 서울시 행정구역 코드 (동 단위) - 더 많은 지역 추가
const DONG_CODES = [
    // 강남구
    "1168010100", "1168010200", "1168010300", "1168010400", "1168010500",
    "1168010600", "1168010700", "1168010800", "1168010900", "1168011000",
    "1168051000", "1168052000", "1168053000", "1168054000", "1168055000",
    "1168056000", "1168057000", "1168058000", "1168059000", "1168060000",
    // 강서구
    "1144010100", "1144010200", "1144010300", "1144010400", "1144010500",
    "1144010600", "1144010700", "1144010800", "1144010900", "1144011000",
    "1144066000", "1144067000", "1144068000", "1144069000", "1144070000",
    "1144071000", "1144072000", "1144073000", "1144074000", "1144075000",
    // 강북구
    "1150010100", "1150010200", "1150010300", "1150010400", "1150010500",
    "1150010600", "1150010700", "1150010800", "1150010900", "1150011000",
    "1150066000", "1150067000", "1150068000", "1150069000", "1150070000",
    "1150071000", "1150072000", "1150073000", "1150074000", "1150075000",
    // 서초구
    "1165010100", "1165010200", "1165010300", "1165010400", "1165010500",
    "1165010600", "1165010700", "1165010800", "1165010900", "1165011000",
    "1165066000", "1165067000", "1165068000", "1165069000", "1165070000",
    // 마포구
    "1144010100", "1144010200", "1144010300", "1144010400", "1144010500",
    "1144010600", "1144010700", "1144010800", "1144010900", "1144011000",
    "1144066000", "1144067000", "1144068000", "1144069000", "1144070000",
    // 송파구
    "1171010100", "1171010200", "1171010300", "1171010400", "1171010500",
    "1171010600", "1171010700", "1171010800", "1171010900", "1171011000",
    "1171066000", "1171067000", "1171068000", "1171069000", "1171070000",
    // 영등포구
    "1156010100", "1156010200", "1156010300", "1156010400", "1156010500",
    "1156010600", "1156010700", "1156010800", "1156010900", "1156011000",
    "1156066000", "1156067000", "1156068000", "1156069000", "1156070000"
];

// 전화번호 접두사
const PHONE_PREFIXES = ["010", "011", "016", "017", "018", "019"];

// 서울시 주요 지역별 좌표 범위
const SEOUL_REGIONS = [
    { name: "강남구", lat: [37.48, 37.56], lng: [127.02, 127.12] },
    { name: "강서구", lat: [37.52, 37.58], lng: [126.80, 126.90] },
    { name: "강북구", lat: [37.58, 37.65], lng: [126.95, 127.05] },
    { name: "서초구", lat: [37.45, 37.52], lng: [126.95, 127.05] },
    { name: "마포구", lat: [37.52, 37.58], lng: [126.88, 126.98] },
    { name: "송파구", lat: [37.48, 37.56], lng: [127.08, 127.18] },
    { name: "영등포구", lat: [37.50, 37.56], lng: [126.85, 126.95] },
    { name: "중구", lat: [37.55, 37.58], lng: [126.95, 127.05] },
    { name: "용산구", lat: [37.52, 37.58], lng: [126.95, 127.05] },
    { name: "성동구", lat: [37.54, 37.58], lng: [127.00, 127.10] }
];

function generateRandomCustomer() {
    // 랜덤 이름
    const name = KOREAN_NAMES[Math.floor(Math.random() * KOREAN_NAMES.length)];
    
    // 랜덤 전화번호
    const prefix = PHONE_PREFIXES[Math.floor(Math.random() * PHONE_PREFIXES.length)];
    const middle = String(Math.floor(Math.random() * 10000)).padStart(4, '0');
    const last = String(Math.floor(Math.random() * 10000)).padStart(4, '0');
    const phone = `${prefix}-${middle}-${last}`;
    
    // 랜덤 지역 선택
    const region = SEOUL_REGIONS[Math.floor(Math.random() * SEOUL_REGIONS.length)];
    const lat = region.lat[0] + Math.random() * (region.lat[1] - region.lat[0]);
    const lng = region.lng[0] + Math.random() * (region.lng[1] - region.lng[0]);
    
    // 랜덤 동 코드
    const dongCode = DONG_CODES[Math.floor(Math.random() * DONG_CODES.length)];
    
    return {
        name,
        phone,
        lat: parseFloat(lat.toFixed(6)),
        lng: parseFloat(lng.toFixed(6)),
        dongCode
    };
}

async function createCustomer(customerData) {
    try {
        const response = await axios.post(`${API_BASE_URL}/customers`, customerData);
        console.log(`✅ 고객 생성 성공: ${customerData.name} (${customerData.phone})`);
        return response.data.data.id;
    } catch (error) {
        console.error(`❌ 고객 생성 실패: ${customerData.name}`, error.response?.data || error.message);
        return null;
    }
}

async function create100Customers() {
    console.log('🚀 100명의 고객 데이터 생성 시작...\n');

    const customerIds = [];
    const batchSize = 10; // 한 번에 10개씩 처리

    for (let i = 0; i < 100; i++) {
        const customer = generateRandomCustomer();
        const customerId = await createCustomer(customer);
        
        if (customerId) {
            customerIds.push(customerId);
        }

        // 진행상황 표시
        if ((i + 1) % batchSize === 0) {
            console.log(`📊 진행상황: ${i + 1}/100 (${Math.round((i + 1) / 100 * 100)}%)`);
        }

        // API 요청 간격 조절 (서버 부하 방지)
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('\n🎉 고객 데이터 생성 완료!');
    console.log(`📊 생성된 고객 수: ${customerIds.length}명`);
    console.log(`📊 성공률: ${Math.round(customerIds.length / 100 * 100)}%`);

    return customerIds;
}

// 스크립트 실행
create100Customers().catch(console.error);
